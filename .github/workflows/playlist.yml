name: Auto-update playlist.m3u

on:
  schedule:
    - cron: "0 * * * *" # Every hour
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-playlist:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Generate playlist.m3u
        id: generate
        run: |
          npm install node-fetch@2
          node <<'EOF'
          const fs = require('fs');
          const fetch = require('node-fetch');

          // Firebase Realtime Database (new source)
          const url = 'https://web-x-app-default-rtdb.asia-southeast1.firebasedatabase.app/channels.json';
          const outputFile = 'playlist.m3u';
          const prevData = fs.existsSync(outputFile) ? fs.readFileSync(outputFile, 'utf8') : '';

          (async () => {
            try {
              const res = await fetch(url);
              const data = await res.json();
              if (!data) {
                console.log("No channels found.");
                process.exit(0);
              }

              let m3u = "#EXTM3U\n";
              let changesSummary = [];

              for (const id of Object.keys(data)) {
                const ch = data[id];
                const name = (ch.name || "Unknown").replace(/[,"\r\n]/g, " ");
                const category = ch.category || "General";
                const logo = ch.icon && ch.icon.trim() !== "" ? ch.icon.trim() : null;
                const stream = ch.stream?.trim();
                if (!stream) continue;

                let extinf = `#EXTINF:-1 tvg-name="${name}" group-title="${category}"`;
                if (logo) extinf += ` tvg-logo="${logo}"`;
                extinf += `,${name}`;

                m3u += `${extinf}\n${stream}\n`;

                // Compare with previous playlist
                const prevExtinf = prevData.split('\n').find(line => line.includes(name) && line.startsWith('#EXTINF'));
                const prevStreamLine = prevExtinf ? prevData.split('\n')[prevData.split('\n').indexOf(prevExtinf) + 1] : null;

                if (!prevExtinf) {
                  changesSummary.push(`Added: ${name}`);
                } else if (prevExtinf !== extinf || prevStreamLine !== stream) {
                  changesSummary.push(`Updated: ${name}`);
                }
              }

              // Check for removed channels
              const oldNames = prevData.split('\n').filter(line => line.startsWith('#EXTINF')).map(line => line.split(',')[1]);
              oldNames.forEach(name => {
                if (!Object.values(data).some(ch => ch.name === name)) {
                  changesSummary.push(`Removed: ${name}`);
                }
              });

              if (changesSummary.length === 0) {
                console.log("No changes detected, skipping update.");
                fs.appendFileSync(process.env.GITHUB_OUTPUT, `changed=false\n`);
                process.exit(0);
              }

              // Write playlist.m3u
              fs.writeFileSync(outputFile, m3u.replace(/\r\n/g, '\n'), { encoding: 'utf8' });

              console.log('playlist.m3u updated successfully.');
              fs.appendFileSync(process.env.GITHUB_OUTPUT, `changed=true\n`);
              fs.appendFileSync(process.env.GITHUB_OUTPUT, `summary=${changesSummary.join('; ')}\n`);

            } catch (err) {
              console.error('Error fetching channels:', err);
              process.exit(1);
            }
          })();
          EOF

      - name: Commit and push if changed
        if: steps.generate.outputs.changed == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout main || git checkout -b main
          git add playlist.m3u
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "Auto-update playlist.m3u [skip ci] - ${{ steps.generate.outputs.summary }}"
          git push
